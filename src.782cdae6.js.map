{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","toggleUserState2","logger2","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","id","makeTransaction2","canProcess","Error","logSuccess","logSuccess2","result","logError","amount","catch"],"mappings":";AAMA,MAAMA,EAAQC,GACH,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACPF,EAAQF,IACTA,KAILK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAQjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,EAAUC,KAKzCA,EAJqBF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAM/DC,EAAmB,CAACL,EAAUC,IACzB,IAAId,QAAQ,CAACC,EAASC,KAKzBD,EAJqBY,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAOnEE,EAAUC,GAAgBd,QAAQe,MAAMD,GAK9CR,EAAgBH,EAAO,QAASU,GAChCP,EAAgBH,EAAO,MAAOU,GAK9BD,EAAiBT,EAAO,SAASD,KAAKW,GACtCD,EAAiBT,EAAO,OAAOD,KAAKW,GAQpC,MAAMG,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkB,CAACC,EAAaC,EAAWC,KACvCjC,MAAAA,EAAQwB,EAA0B,IAAK,KAE7CnB,WAAW,KACYsB,KAAKE,SAAW,GAG/BG,EAAUD,EAAYG,GAAIlC,GAE1BiC,EAAQF,EAAYG,KAEzBlC,IAIDmC,EAAmBJ,IACf/B,MAAAA,EAAQwB,EAA0B,IAAK,KACtC,OAAA,IAAItB,QAAQ,CAACC,EAASC,KACrB8B,IAAAA,EAAKH,EAAYG,GACrB7B,WAAW,KAGH+B,GAFeT,KAAKE,SAAW,GAEnB,CAEZ1B,EADe,CAAC+B,GAAAA,EAAIlC,MAAAA,SAGpBI,EAAOiC,MAAMN,EAAYG,MAE9BlC,MAILsC,EAAa,EAAEJ,GAAAA,EAAI3B,KAAAA,MACrBC,QAAQC,mBAAmByB,kBAAmB3B,QAG5CgC,EAAeC,IACjBhC,QAAQC,mBAAmB+B,EAAON,mBAAmBM,EAAOxC,YAG1DyC,EAAWP,IACb1B,QAAQC,oCAAoCyB,+BAMhDJ,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,KAAOJ,EAAYG,GACrDX,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,KAAOJ,EAAYG,GACrDX,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,IAAMJ,EAAYG,GACpDX,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,KAAOJ,EAAYG,GAIrDN,EAAiB,CAAED,GAAI,GAAIQ,OAAQ,MAC9BhC,KAAK6B,GACLI,MAAMF,GAEXN,EAAiB,CAAED,GAAI,GAAIQ,OAAQ,MAC9BhC,KAAK6B,GACLI,MAAMF,GAEXN,EAAiB,CAAED,GAAI,GAAIQ,OAAQ,KAC9BhC,KAAK6B,GACLI,MAAMF,GAEXN,EAAiB,CAAED,GAAI,GAAIQ,OAAQ,MAC9BhC,KAAK6B,GACLI,MAAMF","file":"src.782cdae6.js","sourceRoot":"../src","sourcesContent":["// ## Задание 1\n\n// Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\n// `\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\n// быть то кол-во миллисекунд которое передали во время вызова функции `delay`.\n\nconst delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// ## Задание 2\n\n// Перепиши функцию `toggleUserState()` так, чтобы она не использовала\n// callback-функцию `callback`, а принимала всего два параметра `allUsers` и\n// `userName` и возвращала промис.\n\nconst users = [\n    { name: \"Mango\", active: true },\n    { name: \"Poly\", active: false },\n    { name: \"Ajax\", active: true },\n    { name: \"Lux\", active: false }\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user\n    );\n\n    callback(updatedUsers);\n};\n\nconst toggleUserState2 = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user\n        );\n\n        resolve(updatedUsers);\n    });\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, \"Mango\", logger2);\ntoggleUserState(users, \"Lux\", logger2);\n\n/*\n * Должно работать так\n */\ntoggleUserState2(users, \"Mango\").then(logger2);\ntoggleUserState2(users, \"Lux\").then(logger2);\n\n// ## Задание 3\n\n// Перепиши функцию `makeTransaction()` так, чтобы она не использовала\n// callback-функции `onSuccess` и `onError`, а принимала всего один параметр\n// `transaction` и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n\n        if (canProcess) {\n            onSuccess(transaction.id, delay);\n        } else {\n            onError(transaction.id);\n        }\n    }, delay);\n};\n\n// for promise!!!\nconst makeTransaction2 = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        let id = transaction.id;\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            \n            if (canProcess) {\n                const result = {id, delay};\n                resolve(result);\n            } else {\n                reject(Error(transaction.id));\n            }\n        }, delay);\n    });\n};\n\nconst logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logSuccess2 = (result) => {\n    console.log(`Transaction ${result.id} processed in ${result.delay}ms`);\n};\n\nconst logError = id => {\n    console.log(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// /*\n//  * Работает так\n//  */\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n//  * Должно работать так\n//  */\nmakeTransaction2({ id: 70, amount: 150 })\n    .then(logSuccess2)\n    .catch(logError);\n\nmakeTransaction2({ id: 71, amount: 230 })\n    .then(logSuccess2)\n    .catch(logError);\n\nmakeTransaction2({ id: 72, amount: 75 })\n    .then(logSuccess2)\n    .catch(logError);\n\nmakeTransaction2({ id: 73, amount: 100 })\n    .then(logSuccess2)\n    .catch(logError);"]}